use std::path::Path;

use demo_stf::genesis_config::GenesisPaths;
use demo_stf::runtime::Runtime;
use sov_demo_rollup::MockDemoRollup;
use sov_modules_api::execution_mode::Native;
use sov_modules_api::OperatingMode;
use sov_modules_rollup_blueprint::RollupBlueprint;
use sov_test_utils::test_rollup::GenesisSource;

include!("../autogenerated.rs");

pub type DemoRollupSpec = <MockDemoRollup<Native> as RollupBlueprint<Native>>::Spec;

pub fn test_genesis_source(
    operating_mode: OperatingMode,
) -> GenesisSource<DemoRollupSpec, Runtime<DemoRollupSpec>> {
    GenesisSource::Paths(test_genesis_paths(operating_mode))
}

pub fn test_genesis_paths(operating_mode: OperatingMode) -> GenesisPaths {
    let dir: &dyn AsRef<Path> = &"../test-data/genesis/integration-tests/";

    let mut paths = GenesisPaths::from_dir(dir.as_ref());
    paths.chain_state_genesis_path = match operating_mode {
        OperatingMode::Zk => dir.as_ref().join("chain_state_zk.json"),
        OperatingMode::Optimistic => dir.as_ref().join("chain_state_op.json"),
    };

    paths
}
