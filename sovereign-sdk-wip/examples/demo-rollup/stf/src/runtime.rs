//! The Rollup entrypoint.
//!
//! On a high level, the rollup node receives serialized call messages from the DA layer and executes them as atomic transactions.
//! Upon reception, the message has to be deserialized and forwarded to an appropriate module.
//!
//! The module-specific logic is implemented by module creators, but all the glue code responsible for message
//! deserialization/forwarding is handled by a rollup `runtime`.
//!
//! In order to define the runtime we need to specify all the modules supported by our rollup (see the `Runtime` struct bellow)
//!
//! The `Runtime` together with associated interfaces (`Genesis`, `DispatchCall`, `MessageCodec`)
//! and derive macros defines:
//! - how the rollup modules are wired up together.
//! - how the state of the rollup is initialized.
//! - how messages are dispatched to appropriate modules.
//!
//! Runtime lifecycle:
//!
//! 1. Initialization:
//!     When a rollup is deployed for the first time, it needs to set its genesis state.
//!     The `#[derive(Genesis)` macro will generate `Runtime::genesis(config)` method which returns
//!     `Storage` with the initialized state.
//!
//! 2. Calls:      
//!     The `Module` interface defines a `call` method which accepts a module-defined type and triggers the specific `module logic.`
//!     In general, the point of a call is to change the module state, but if the call throws an error,
//!     no module specific state is updated (the transaction is reverted).
#[cfg(feature = "native")]
use std::sync::Arc;

use sov_address::{EthereumAddress, FromVmAddress};
#[cfg(feature = "native")]
pub use sov_attester_incentives::BondingProofServiceImpl;
use sov_capabilities::StandardProvenRollupCapabilities as StandardCapabilities;
use sov_evm::{EthereumAuthenticator, EvmAuthenticatorInput};
use sov_kernels::soft_confirmations::SoftConfirmationsKernel;
#[cfg(feature = "native")]
use sov_modules_api::capabilities::KernelWithSlotMapping;
use sov_modules_api::capabilities::{Guard, HasCapabilities, HasKernel, TransactionAuthenticator};
#[cfg(feature = "native")]
use sov_modules_api::macros::{expose_rpc, CliWallet};
use sov_modules_api::prelude::*;
use sov_modules_api::{DispatchCall, Event, Genesis, Hooks, MessageCodec, RawTx, Spec};

#[cfg(feature = "native")]
use crate::genesis_config::GenesisPaths;

mod __generated {
    include!("../../autogenerated.rs");
}

/// The `demo-stf runtime`.
#[derive(Default, Clone, Genesis, Hooks, DispatchCall, Event, MessageCodec, RuntimeRestApi)]
#[cfg_attr(feature = "native", derive(CliWallet), expose_rpc)]
pub struct Runtime<S: Spec>
where
    S::Address: FromVmAddress<EthereumAddress>,
{
    /// The Bank module.
    pub bank: sov_bank::Bank<S>,
    /// The Sequencer Registry module.
    pub sequencer_registry: sov_sequencer_registry::SequencerRegistry<S>,
    /// The Value Setter module.
    pub value_setter: sov_value_setter::ValueSetter<S>,
    /// The Attester Incentives module.
    pub attester_incentives: sov_attester_incentives::AttesterIncentives<S>,
    /// The Prover Incentives module.
    pub prover_incentives: sov_prover_incentives::ProverIncentives<S>,
    /// The Accounts module.
    pub accounts: sov_accounts::Accounts<S>,
    /// The uniqueness module.
    pub uniqueness: sov_uniqueness::Uniqueness<S>,
    /// The Chain state module.
    pub chain_state: sov_chain_state::ChainState<S>,
    /// The Blob storage module.
    pub blob_storage: sov_blob_storage::BlobStorage<S>,
    /// The Paymaster module.
    pub paymaster: sov_paymaster::Paymaster<S>,
    #[cfg_attr(feature = "native", cli_skip)]
    /// The EVM module.
    pub evm: sov_evm::Evm<S>,
    /// A module used in benchmarks to generate a wide range of transaction access patterns.
    pub access_pattern: sov_test_modules::access_pattern::AccessPattern<S>,
}

impl<S> sov_modules_stf_blueprint::Runtime<S> for Runtime<S>
where
    S: Spec,
    S::Address: FromVmAddress<EthereumAddress>,
{
    const CHAIN_HASH: [u8; 32] = __generated::CHAIN_HASH;

    type GenesisConfig = GenesisConfig<S>;

    #[cfg(feature = "native")]
    type GenesisInput = GenesisPaths;

    type Auth = sov_evm::EvmAuthenticator<S, Self>;

    #[cfg(feature = "native")]
    fn endpoints(
        api_state: sov_modules_api::rest::ApiState<S>,
    ) -> ::sov_modules_api::NodeEndpoints {
        use ::sov_modules_api::rest::HasRestApi;
        use ::sov_rollup_apis::dedup::{DeDupEndpoint, NonceDeDupEndpoint};
        use ::sov_rollup_apis::schema::{SchemaEndpoint, StandardSchemaEndpoint};

        let axum_router = Self::default().rest_api(api_state.clone());
        // Provide an endpoint to return dedup information associated with addresses.
        // Since our runtime is using the uniqueness module we can use the provided `NonceDeDupEndpoint` implementation.
        let dedup_endpoint = NonceDeDupEndpoint::new(api_state.clone());
        let axum_router = axum_router.merge(dedup_endpoint.axum_router());

        let schema_endpoint = StandardSchemaEndpoint::new(
            &serde_json::from_str(__generated::SCHEMA_JSON)
                .expect("Failed to deserialize schema json"),
        )
        .expect("Failed to initialize StandardSchemaEndpoint");
        let axum_router = axum_router.merge(schema_endpoint.axum_router());

        ::sov_modules_api::NodeEndpoints {
            axum_router,
            jsonrpsee_module: get_rpc_methods::<S>(api_state),
            background_handles: Vec::new(),
        }
    }

    #[cfg(feature = "native")]
    fn genesis_config(input: &Self::GenesisInput) -> anyhow::Result<Self::GenesisConfig> {
        crate::genesis_config::create_genesis_config(input)
    }

    fn operating_mode(genesis: &Self::GenesisConfig) -> sov_modules_api::OperatingMode {
        genesis.chain_state.operating_mode
    }

    fn wrap_call(
        auth_data: <Self::Auth as TransactionAuthenticator<S>>::Decodable,
    ) -> Self::Decodable {
        match auth_data {
            EvmAuthenticatorInput::Evm(call) => Self::Decodable::Evm(call),
            EvmAuthenticatorInput::Standard(call) => call,
        }
    }

    fn allow_unregistered_tx(call: &Self::Decodable) -> bool {
        matches!(
            call,
            Self::Decodable::SequencerRegistry(
                sov_sequencer_registry::CallMessage::Register { .. }
            )
        )
    }
}

impl<S: Spec> HasCapabilities<S> for Runtime<S>
where
    S::Address: FromVmAddress<EthereumAddress>,
{
    type Capabilities<'a> = StandardCapabilities<'a, S, &'a mut sov_paymaster::Paymaster<S>>;
    fn capabilities(&mut self) -> Guard<Self::Capabilities<'_>> {
        Guard::new(StandardCapabilities {
            bank: &mut self.bank,
            gas_payer: &mut self.paymaster,
            sequencer_registry: &mut self.sequencer_registry,
            accounts: &mut self.accounts,
            uniqueness: &mut self.uniqueness,
            prover_incentives: &mut self.prover_incentives,
            attester_incentives: &mut self.attester_incentives,
        })
    }
}

impl<S: Spec> HasKernel<S> for Runtime<S>
where
    S::Address: FromVmAddress<EthereumAddress>,
{
    type Kernel<'a> = SoftConfirmationsKernel<'a, S>;

    fn inner(&mut self) -> Guard<Self::Kernel<'_>> {
        Guard::new(SoftConfirmationsKernel {
            chain_state: &mut self.chain_state,
            blob_storage: &mut self.blob_storage,
        })
    }

    #[cfg(feature = "native")]
    fn kernel_with_slot_mapping(&self) -> Arc<dyn KernelWithSlotMapping<S>> {
        Arc::new(self.chain_state.clone())
    }
}

impl<S: Spec> EthereumAuthenticator<S> for Runtime<S>
where
    S::Address: FromVmAddress<EthereumAddress>,
{
    fn add_ethereum_auth(tx: RawTx) -> <Self::Auth as TransactionAuthenticator<S>>::Input {
        EvmAuthenticatorInput::Evm(tx)
    }
}
