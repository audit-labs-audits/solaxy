use sov_bank::TokenId;
use sov_modules_api::Amount;
use sov_test_utils::runtime::genesis::optimistic::HighLevelOptimisticGenesisConfig;
use sov_test_utils::runtime::genesis::TestTokenName;
use sov_test_utils::runtime::TestRunner;
use sov_test_utils::{generate_optimistic_runtime, TestUser};

pub type S = sov_test_utils::TestSpec;

generate_optimistic_runtime!(TestBankRuntime <=);

/// The default runtime type used in the bank tests.
pub type RT = TestBankRuntime<S>;

/// A handful of useful test roles generated by the [`setup`] function.
pub struct TestData {
    /// A specific token ID used in the tests.
    pub token_name: TestTokenName,
    /// The token ID associated with [`Self::token_name`].
    pub token_id: TokenId,
    /// A user with a high token balance of [`Self::token_id`].
    pub user_high_token_balance: TestUser<S>,
    /// A user with no token balance of [`Self::token_id`].
    pub user_no_token_balance: TestUser<S>,
    /// A user that can mint tokens. By default can mint the token whose id is [`Self::token_id`].
    pub minter: TestUser<S>,
}

/// Sets up the bank tests by generating a genesis config with a single non-default token that has
/// - a minter
/// - a user with a high token balance
/// - a user with no balance for the token
///
/// Also allows to set up a custom runtime using a closure. Useful for the gas tests to change the gas costs
/// of the bank runtime.
pub fn setup_with_custom_runtime(
    runtime_setup: impl FnOnce(&mut RT),
) -> (TestData, TestRunner<RT, S>) {
    let token_name = TestTokenName::new("BankToken".to_string());
    let token_id = token_name.id();

    let genesis_config = HighLevelOptimisticGenesisConfig::generate()
        .add_accounts_with_default_balance(1)
        .add_accounts_with_token(&token_name, true, 1, Amount::new(100_000));

    let user_no_token_balance = genesis_config.additional_accounts[0].clone();

    assert!(user_no_token_balance.token_balance(&token_name).is_none());

    let mut token_users_vec = genesis_config.get_accounts_for_token(&token_name);

    let user_high_token_balance = token_users_vec.pop().unwrap();
    let minter = token_users_vec.pop().unwrap();

    let genesis = GenesisConfig::from_minimal_config(genesis_config.into());

    let mut runtime = RT::default();
    runtime_setup(&mut runtime);

    let runner = TestRunner::new_with_genesis(genesis.into_genesis_params(), runtime);

    (
        TestData {
            token_name,
            token_id,
            user_high_token_balance,
            minter,
            user_no_token_balance,
        },
        runner,
    )
}

/// Sets up the bank tests by generating a genesis config with a single non-default token that has
/// - a minter
/// - a user with a high token balance
/// - a user with no balance for the token
///
/// Note: this is a helper function for [`setup_with_custom_runtime`] which does not set up any
/// custom runtime.
pub fn setup() -> (TestData, TestRunner<RT, S>) {
    setup_with_custom_runtime(|_| {})
}
