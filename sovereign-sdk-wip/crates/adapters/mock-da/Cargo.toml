[package]
name = "sov-mock-da"
description = "Mock implementation of Data Availability layer for testing purposes"
version.workspace = true
edition.workspace = true
license.workspace = true
authors.workspace = true
homepage.workspace = true
repository.workspace = true
readme = "README.md"
publish = true

[lints]
workspace = true

[dependencies]
anyhow = { workspace = true }
arbitrary = { workspace = true, optional = true }
async-trait = { workspace = true }
borsh = { workspace = true, features = ["bytes"] }
bytes = { workspace = true, features = ["serde"] }
derive_more = { workspace = true, features = ["from", "into"] }
proptest = { workspace = true, optional = true }
proptest-derive = { workspace = true, optional = true }
schemars = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
hex = { workspace = true, features = ["serde"] }
sha2 = { workspace = true }
tokio = { workspace = true, optional = true, features = [
    "test-util",
    "macros",
] }
futures = { workspace = true, optional = true, features = ["std"] }
tracing = { workspace = true }
sov-rollup-interface = { workspace = true }

# For storable service
sea-orm = { version = "1.1", features = [
    "sqlx-sqlite",
    "runtime-tokio-rustls",
    "macros",
    "with-chrono",
], default-features = false, optional = true }
chrono = { workspace = true, optional = true }
rand = { workspace = true, optional = true, features = ["small_rng"] }
rand_chacha = { workspace = true, optional = true }

[dev-dependencies]
bincode = { workspace = true }
toml = { workspace = true }
insta = { workspace = true }
futures = { workspace = true }
serde_json = { workspace = true }
sov-mock-da = { path = ".", features = ["native", "arbitrary"] }
sov-test-utils = { workspace = true, features = ["arbitrary"] }
criterion = { version = "0.5.1", features = ["async_tokio"] }
tempfile = { workspace = true }
tokio = { workspace = true, features = [
    "test-util",
    "macros",
    "rt-multi-thread",
] }
rand = { workspace = true }
testcontainers = { workspace = true, features = ["blocking"] }
testcontainers-modules = { workspace = true, features = ["postgres"] }

[features]
default = []
arbitrary = [
    "dep:arbitrary",
    "chrono?/arbitrary",
    "dep:proptest",
    "dep:proptest-derive",
    "sov-mock-da/arbitrary",
    "sov-rollup-interface/arbitrary",
    "sov-test-utils/arbitrary"
]
native = [
    "dep:chrono",
    "dep:futures",
    "dep:sea-orm",
    "dep:tokio",
    "sov-mock-da/native",
    "sov-rollup-interface/native",
    "dep:rand",
    "dep:rand_chacha",
]
postgres = ["native", "sea-orm/sqlx-postgres"]

[[bench]]
name = "concurrent_access"
path = "benches/concurrent_access.rs"
harness = false
required-features = ["native"]
