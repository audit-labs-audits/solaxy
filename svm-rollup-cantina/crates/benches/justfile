# Contains INFLUX_ORG_ID and INFLUX_AUTH_TOKEN.

set dotenv-filename := 'SECRETS.env'
set dotenv-load := true
set export := true

# Can be "small", "standard" or "large"

SIZE := env('SIZE', 'small')

# Should be greater than 0. Usually below 30.

NUM_THREADS_LOGS := env('NUM_THREADS_LOGS', '20')
DOCKER_PATH := env('DOCKER_PATH', '../../../docker')
LOCALHOST := env('LOCALHOST', '127.0.0.1')
TELEGRAF_PORT := env('TELEGRAF_PORT', '8094')
INFLUX_PORT := env('INFLUX_PORT', '8086')
INFLUX_ORG_ID := env('INFLUX_ORG_ID')
INFLUX_AUTH_TOKEN := env('INFLUX_AUTH_TOKEN')

start_metrics_container:
    echo "Starting metrics container. Telegraf port: {{ TELEGRAF_PORT }}, Influx port: {{ INFLUX_PORT }}..."
    docker compose -f {{ DOCKER_PATH / 'docker-compose.obs.yml' }} up -d

stop_metrics_container:
    echo "Stopping metrics container..."
    docker compose -f {{ DOCKER_PATH / 'docker-compose.obs.yml' }} down

generate_benches:
    echo "Generating {{ SIZE }} benchmarks..."
    echo "Benchmark files stored at path: ./src/bench_files/generated/{{ SIZE }}"
    mkdir -p ./src/bench_files/generated/{{ SIZE }}
    cargo build -r --bin bench_generator 
    ../../target/release/bench_generator -p ./src/bench_files/generated/{{ SIZE }} {{ SIZE }}

build_metrics:
    echo "Running benchmark files path: ./src/bench_files/generated/{{ SIZE }}"
    cargo build -r --bench build_metrics 

run_benches: build_metrics
    #!/usr/bin/env bash
    set -euo pipefail
    output=$(ls -t ../../target/release/deps/build_metrics-* | head -n 1)
    $output -p ./src/bench_files/generated/{{ SIZE }}

run_benches_with_logs: build_metrics
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Logging threads: {{ NUM_THREADS_LOGS }}"
    output=$(ls -t ../../target/release/deps/build_metrics-* | head -n 1)
    $output -p ./src/bench_files/generated/{{ SIZE }} -l {{ NUM_THREADS_LOGS }}

run_benches_with_encoded_metrics: start_metrics_container build_metrics
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Telegraf port: {{ TELEGRAF_PORT }}, Influx port: {{ INFLUX_PORT }}..."
    echo "Metrics will be stored at path: ./src/metrics/generated/{{ SIZE }}"
    output=$(ls -t ../../target/release/deps/build_metrics-* | head -n 1)
    $output -p ./src/bench_files/generated/{{ SIZE }} \
    	metrics -t {{ LOCALHOST }}:{{ TELEGRAF_PORT }} -i {{ LOCALHOST }}:{{ INFLUX_PORT }} \
    	-o ./src/metrics/generated/{{ SIZE }} \
    	--influx-auth-token {{ INFLUX_AUTH_TOKEN }} --influx-org-id {{ INFLUX_ORG_ID }} -e

run_benches_with_zk_metrics: start_metrics_container build_metrics
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Telegraf port: {{ TELEGRAF_PORT }}, Influx port: {{ INFLUX_PORT }}..."
    echo "Metrics will be stored at path: ./src/metrics/generated/{{ SIZE }}"
    output=$(ls -t ../../target/release/deps/build_metrics-* | head -n 1) && \
    $output -p ./src/bench_files/generated/{{ SIZE }} \
    	metrics -t {{ LOCALHOST }}:{{ TELEGRAF_PORT }} -i {{ LOCALHOST }}:{{ INFLUX_PORT }} \
    	-o ./src/metrics/generated/{{ SIZE }} \
    	--influx-auth-token {{ INFLUX_AUTH_TOKEN }} --influx-org-id {{ INFLUX_ORG_ID }} \
    	measurements zk_vm zk_proving

run_benches_with_gas_constants_and_zk_metrics: start_metrics_container
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Running benchmark files path: ./src/bench_files/generated/{{ SIZE }}."
    cargo build -r --bench build_metrics --features gas-constant-estimation
    echo "Telegraf port: {{ TELEGRAF_PORT }}, Influx port: {{ INFLUX_PORT }}..."
    echo "Metrics will be stored at path: ./src/metrics/generated/{{ SIZE }}"
    output=$(ls -t ../../target/release/deps/build_metrics-* | head -n 1) && \
    $output -p ./src/bench_files/generated/{{ SIZE }} \
    	metrics -t {{ LOCALHOST }}:{{ TELEGRAF_PORT }} -i {{ LOCALHOST }}:{{ INFLUX_PORT }} \
    	-o ./src/metrics/generated/{{ SIZE }} \
    	--influx-auth-token {{ INFLUX_AUTH_TOKEN }} --influx-org-id {{ INFLUX_ORG_ID }} \
    	measurements zk_vm zk_proving gas_constant_usage
