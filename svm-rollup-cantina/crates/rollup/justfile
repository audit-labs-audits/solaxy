project_root := `git rev-parse --show-toplevel`
docker_compose_dir := project_root / 'docker'
credentials_dir := docker_compose_dir / 'credentials'
docker_compose := 'docker compose -f ' + docker_compose_dir / 'docker-compose.yml'
test_private_key_path := project_root / 'crates' / 'test-data' / 'keys' / 'minter_private_key.json'
sov_cli_rel_path := project_root / 'target' / 'debug' / 'sov-cli'
p2p_network := 'private'
key_name := 'bridge-0'
celestia_start_time_file := '/tmp/.sov-celestia-docker-start-timestamp.tmp'

# This can be retrieved with `solana address -k docker/solana/id.json`, but hardcoding it means
# there is no need to install the Solana CLI just to get this value out.

solana_start_time_file := '/tmp/.sov-solana-docker-start-timestamp.tmp'
export PAYER_PUBKEY := '2MCVmcuUcREwQKDS3HazuYctkkbZV3XRMspM5eLWRZUV'
date_format := "+%Y-%m-%d %H:%M:%S"
jwt_token_path := credentials_dir / key_name + '.jwt'
get_token := docker_compose + ' exec -it celestia-sequencer celestia bridge auth admin --p2p.network "private"'
sov_cli := require(sov_cli_rel_path)
docker := require('docker')

[private]
check-sov-cli:
    @if [ ! -f {{ sov_cli }} ]; then echo 'sov-cli has not been built, run "just build"' && exit 1; fi

[private]
check-docker:
    @if [ ! -f {{ docker }} ]; then echo 'Docker is not installed' && exit 1; fi

[group('clean')]
[private]
clean-base:
    rm -rf "./demo_data"
    rm -rf "~/.sov-cli-wallet"
    echo "removing unsent transactions from local storage"
    if [ -f {{ sov_cli_rel_path }} ]; then {{ sov_cli_rel_path }} transactions clean; fi

[group('clean')]
[private]
clean-path path:
    @if [ -z {{ path }} ] || [ {{ path }} = "./" ]; then echo 'Path is empty or too short, not safe to remove' && exit 1; fi
    echo "removing {{ path }}"
    rm -rf {{ path }}

# Clean up data generated by the mock variant of the rollup
[group('clean')]
clean-mock: clean-base && (clean-path `awk -F'=' '/^path/ {print $$2}' mock_rollup_config.toml | tr -d '[:space:]"\n'`)
    rm -rf "mock_da.sqlite"

# Clean up data generated by the celestia variant of the rollup
[group('clean')]
clean-celestia: check-docker clean-base && (clean-path `awk -F'=' '/^path/ {print $$2}' celestia_rollup_config.toml | tr -d '[:space:]"\n'`)
    echo "Stopping local celestia network setup"
    {{ docker_compose }} --profile celestia down --volumes --rmi local
    rm -f {{ credentials_dir / key_name + '.jwt' }}
    rm -f rollup_config.toml

# Clean up data generated by the solana variant of the rollup
[group('clean')]
clean-solana: check-docker clean-base && (clean-path `awk -F'=' '/^path/ {print $$2}' solana_rollup_config.toml | tr -d '[:space:]"\n'`)
    echo "Stopping local solana network setup"
    {{ docker_compose }} --profile solana down --volumes --rmi local

# Clean up all data that was generated by all variants of the rollup
[group('clean')]
clean: clean-mock clean-celestia clean-solana

# Run the mock variant of the rollup
[group('run')]
run-mock:
    cargo run -p svm-rollup

# Run the celestia variant of the rollup
[group('run')]
run-celestia:
    cargo run -p svm-rollup -- --da-layer celestia --rollup-config-path rollup_config.toml --genesis-config-dir ../test-data/genesis/demo/celestia

# Run the solana variant of the rollup
[group('run')]
run-solana:
    cargo run -p svm-rollup -- --da-layer solana --rollup-config-path solana_rollup_config.toml --genesis-config-dir ../test-data/genesis/demo/solana

[group('start')]
[private]
start-time variant:
    #!/usr/bin/env bash
    set -euo pipefail
    echo $(date '+%s') > {{ if variant == 'solana' { solana_start_time_file } else { celestia_start_time_file } }}
    echo "$(date '{{ date_format }}'): Starting {{ if variant == 'solana' { 'Solana' } else { 'Celestia' } }} docker compose..."

[group('start')]
[private]
print-time variant:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Services are ready"
    start_time=$(cat {{ if variant == "solana" { solana_start_time_file } else { celestia_start_time_file } }})
    end_time=$(date +%s)
    duration=$(($end_time - $start_time))
    echo "{{ if variant == 'solana' { 'Solana' } else { 'Celestia' } }} docker compose has started."
    echo "$(date '{{ date_format }}'): Duration: $duration seconds."

[group('start')]
[private]
wait-for-healthy variant:
    #!/usr/bin/env bash
    set -euo pipefail
    service="{{ if variant == 'solana' { 'solana-indexer' } else { 'celestia-sequencer' } }}"
    echo "$(date '{{ date_format }}'): waiting for container '$service' to become operational..."
    while true; do
    	health=`docker inspect --format='{{{{.State.Health.Status}}' $({{ docker_compose }} ps -q $service)`
    	if [ $health == "healthy" ]; then
    		echo "$(date '{{ date_format }}'): $service is healthy"
    		break
    	else
    		echo "$(date '{{ date_format }}'): health == '$health': Waiting for $service to be up and running..."
    	fi
    	sleep 3
    done
    echo "Services are ready, preparing configuration"

[group('start')]
[private]
get-celestia-token:
    #!/usr/bin/env bash
    set -euo pipefail
    token=""
    while [ -z $token ]; do
    	echo "$(date '{{ date_format }}'): Waiting JWT for token..."
    	token=`{{ get_token }} 2>/dev/null`
    	sleep 0.5
    done
    echo "$(date '{{ date_format }}'): token received: $token"
    cat celestia_rollup_config.toml | sed 's/^\(celestia_rpc_auth_token = \)"[^"]*"/\1"'$token'"/' > rollup_config.toml

# Start the celestia docker compose
[group('start')]
start-celestia: check-docker (start-time 'celestia') && (wait-for-healthy 'celestia') get-celestia-token (print-time 'celestia')
    {{ docker_compose }} --profile celestia up --build --force-recreate -d --quiet-pull

# Start the solana docker compose
[group('start')]
start-solana: check-docker (start-time 'solana') && (wait-for-healthy 'solana') (print-time 'solana')
    # The build step must be separate to use the --ssh flag.
    {{ docker_compose }} --profile solana build --ssh default --build-arg PAYER_PUBKEY={{ PAYER_PUBKEY }}
    {{ docker_compose }} --profile solana up --force-recreate -d --quiet-pull

# Set up the solana configuration
[group('start')]
solana-config:
    #!/usr/bin/env bash
    set -euo pipefail
    solana_config_dir={{ `mktemp -d` }}
    cp {{ docker_compose_dir / 'solana' / 'id.json' }}  $solana_config_dir
    cat {{ docker_compose_dir / 'solana' / 'cli-config.yml' }} | sed -r 's#^(\s*keypair_path\s*:\s*).*#\1'$solana_config_dir'/id.json#' > "$solana_config_dir/config.yml"
    echo "$solana_config_dir/config.yml"

# Build the binaries
[group('build')]
build:
    cargo build --bins

# Stop all docker services
[group('docker')]
stop: check-docker
    {{ docker_compose }} down

# Follow the logs of the docker services
[group('docker')]
logs:
    {{ docker_compose }} logs -f

# Print the JWT token for celestia
[group('token')]
print-jwt-token:
    token=`{{ get_token }} 2>/dev/null` && echo "Token: $token"

# Create a new token for celestia
[group('token')]
test-create-token: check-sov-cli
    {{ sov_cli_rel_path }} node set-url http://127.0.0.1:8899
    {{ sov_cli_rel_path }} keys import --skip-if-present --nickname DANGER__DO_NOT_USE_WITH_REAL_MONEY --path ../test-data/keys/token_deployer_private_key.json
    {{ sov_cli_rel_path }} transactions import from-file bank --chain-id 4321 --max-fee 100000000 --path ../test-data/requests/create_token.json
    echo "Submitting a batch"
    {{ sov_cli_rel_path }} node submit-batch --wait-for-processing by-nickname DANGER__DO_NOT_USE_WITH_REAL_MONEY

# Remove insecure keys
[group('token')]
remove-insecure-keys: check-sov-cli
    {{ sov_cli_rel_path }} keys remove by-address HjjEhif8MU9DtnXtZc5hkBu9XLAkAYe1qwzhDoxbcECv
